stages:
  - scan
  - package
  - container_scan
  - send_email
  - deploy

#code quality checking
# sonar scanning:

.gpg: &gpg
  before_script:
    - apk update
    - apk add --no-cache nodejs npm
    - apk add --no-cache gnupg
    - echo "$ENV_PASS_PHRASE" | gpg --batch --yes --passphrase-fd 0 --decrypt --output .env .env.gpg

sonarqube-check:
  stage: scan
  tags:
    - docker
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: true
  only:
    - feature/gitdock

#gitleaks
#gitleaks image ref:https://github.com/gitleaks/gitleaks#getting-started
#About gitleaks ref:https://akashchandwani.medium.com/what-is-gitleaks-and-how-to-use-it-a05f2fb5b034

# gitleaks:
#   stage: leaks
#   image: 
#     name: "zricethezav/gitleaks"
#     entrypoint: [""]
#   script:
#     - gitleaks -v --repo-path=./ --config=gitleaks.toml


######building docker imaged
package_backend:
  stage: package
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  extends:
    - .gpg
  script:
    - npm install
    - npm run build
    - echo "$CI_GITLAB_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE
    - docker tag $CI_REGISTRY_IMAGE 975050132155.dkr.ecr.ap-south-1.amazonaws.com/libtool:latest
  tags:
    - docker



#container Scanning vulnerbility checking for backend image(Trivy)
#about trivy code ref:https://aquasecurity.github.io/trivy/v0.18.3/integrations/gitlab-ci/
container_scanning:
  stage: container_scan
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_GITLAB_TOKEN"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
  extends:
    - .gpg
  script:
    - trivy --version
    # cache cleanup is needed when scanning images with the same tags, it does not remove the database
    - time trivy image --clear-cache
    - trivy image --format json -o container-scanning-report.json --severity HIGH --exit-code 1 $CI_REGISTRY_IMAGE || echo "FAILED" > container-scan-result.txt
    - npm install -g typescript
    - tsc report/uploadscannedreport.ts    
    - node report/uploadscannedreport.js container-scanning-report.json
  artifacts:
    when: always
    paths:
      - container-scanning-report.json
      - container-scan-result.txt
  dependencies:
    - package_backend
  tags:
    - docker




#######deploying backend if no vulnerbilites we found
deploy_backend:
  stage: deploy
  before_script:
    - apk add aws-cli
  script:
    - aws --version
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    - aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 680866457108.dkr.ecr.ap-south-1.amazonaws.com
    - docker push 680866457108.dkr.ecr.ap-south-1.amazonaws.com/libtool:latest
    - docker logout
    - chmod +x ./deploy/ec2/*
    - ./deploy/ec2/deploy.sh
  dependencies:
    - container_scanning
  tags:
    - docker





#########sending email to the developement team if any high vulnerbilities found in container_scanning stage
send_email:
  image: ubuntu:22.04
  stage: send_email
  script:
    # Install necessary packages
    - apt-get update
    - apt-get install -y wget gnupg

    # Import MongoDB GPG key
    - wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | apt-key add -

    # Add MongoDB repository
    - echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse" | tee /etc/apt/sources.list.d/mongodb-org-5.0.list

    # Update package index again
    - apt-get update

    # Install MongoDB Shell (mongosh)
    - apt-get install -y mongodb-mongosh

    - mongosh --version

    # - apt-get install bsd-mailx -y
    - apt-get install mutt -y
    - apt-get install sendmail -y

    - chmod +x ./email/sendmail.sh
    
    - if [ -f "container-scan-result.txt" ]; then ./email/sendmail.sh; fi
  dependencies:
    - container_scanning
  tags:
    - docker

