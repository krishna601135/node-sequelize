stages:
  - package
  - container_scan
  - deploy

#code quality checking
# sonar scanning:

#variables section
variables:
  CONTAINER_IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  CONTAINER_IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

package_backend:
  stage: package
  image: docker:20.10.16
  tags:
    - docker
  services:
    - docker:20.10.16-dind
  before_script:
    - apk update
    - apk add --no-cache nodejs npm
    - echo "$CI_GITLAB_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
  script:
    - npm install
    - npm run build
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE
    - docker tag $CI_REGISTRY_IMAGE 680866457108.dkr.ecr.ap-south-1.amazonaws.com/library:latest



#container Scanning vulnerbility checking for backend image(Trivy)
container_scanning:
  stage: container_scan
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_GITLAB_TOKEN"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
  script:
    - trivy --version
    - time trivy image --clear-cache
    - trivy image --format json --output  container-scanning-report.json $CI_REGISTRY_IMAGE
  artifacts:
    when: always
    when: always
    paths:
      - container-scanning-report.json
      - container-scanning-report.json
  tags:
    - docker
  dependencies:
    - package_backend


#deploying backend
deploy_backend:
  stage: deploy
  when: manual
  before_script:
    - apk add aws-cli
  script:
    - aws --version
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    - aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 680866457108.dkr.ecr.ap-south-1.amazonaws.com
    - docker push 680866457108.dkr.ecr.ap-south-1.amazonaws.com/library:latest
    - docker logout
    - ssh -i   
  tags:
    - docker
















# for creating project runners
# https://killercoda.com/rkalluru
# volumes = ["/cache", "/var/run/docker.sock:/var/run/docker.sock", "/builds:/builds"]
# sudo usermod -aG docker root


#Configuration (with the authentication token) was saved in "/etc/gitlab-runner/config.toml"

# commands in deploy_backend:
# - apt-get install wget -y
#     - pwd
#     - ls
#     - chmod +x deploy/ec2/*
#     - deploy/ec2/deploy.sh
# sendEmail:
#   stage: send-email

# registry.gitlab.example.com/my_group/my_project CI_REGISTRY_IMAGE format
# CI_COMMIT_REF_SLUG --> CI_COMMIT_REF_NAME in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -.
# No leading / trailing -. Use in URLs, host names and domain names.

# Frontend:
# react

# backend:
# node
# node js through AWS communication
# to save cost we did not integrate with frontned
# communication happens through nodjs

# Updates are through rest API's for the frontend to be consumed
# AWS keeps on updating frequently every minute through node we have written a process for everyday like we are writting a CRON job to specify when the job should run we have written a service there also in CRON job
# through this we are getting the realtime data for it
# the data is being saved in mongo db and through REST API's we are getting the data and consuming them in the front end.
# Username: training@purpletalk.com
# password: L3@rn!NGs$321