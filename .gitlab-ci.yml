stages:
  - package
  - container_scan
  - send_email
  - deploy

#code quality checking
# sonar scanning:

.gpg: &gpg
  before_script:
    - apk update
    - apk add --no-cache nodejs npm
    - apk add --no-cache gnupg
    - echo "$ENV_PASS_PHRASE" | gpg --batch --yes --passphrase-fd 0 --decrypt --output .env .env.gpg




######building docker image
package_backend:
  stage: package
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  extends:
    - .gpg
  script:
    - npm install
    - npm run build
    - echo "$CI_GITLAB_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE
    - docker tag $CI_REGISTRY_IMAGE 680866457108.dkr.ecr.us-east-1.amazonaws.com/libtool:latest
  tags:
    - docker



#container Scanning vulnerbility checking for backend image(Trivy)
container_scanning:
  stage: container_scan
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_GITLAB_TOKEN"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
  extends:
    - .gpg
  script:
    - trivy --version
    # cache cleanup is needed when scanning images with the same tags, it does not remove the database
    - time trivy image --clear-cache
    - trivy image --format json -o container-scanning-report.json --severity HIGH --exit-code 1 $CI_REGISTRY_IMAGE || echo "FAILED" > container-scan-result.txt
    - npm install -g typescript
    - tsc reports/upload.ts    
    - node reports/upload.js container-scanning-report.json
  artifacts:
    when: always
    paths:
      - container-scanning-report.json
      - container-scan-result.txt
  dependencies:
    - package_backend
  tags:
    - docker




#######deploying backend if no vulnerbilites were found
deploy_backend:
  stage: deploy
  before_script:
    - apk add aws-cli
  script:
    - aws --version
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 680866457108.dkr.ecr.us-east-1.amazonaws.com
    - docker push 680866457108.dkr.ecr.us-east-1.amazonaws.com/libtool:latest
    - docker logout
    - chmod +x ./deploy/ec2/*
    - ./deploy/ec2/deploy.sh
  dependencies:
    - container_scanning
  tags:
    - docker





#########sending email to the developement team if any high vulnerbilities found in container_scanning stage
send_email:
  stage: send_email
  script:
    - chmod +x ./email/send_email_script.sh
    - if [ -f "container-scan-result.txt" ]; then ./email/send_email_script.sh; fi

  dependencies:
    - container_scanning
  tags:
    - docker
